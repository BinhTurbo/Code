package com.webmini.miniweb.catalog.category.service;

import com.webmini.miniweb.catalog.category.dto.*;
import com.webmini.miniweb.catalog.category.entity.Category;
import com.webmini.miniweb.catalog.category.mapper.CategoryMapper;
import com.webmini.miniweb.catalog.category.repo.CategoryRepository;
import com.webmini.miniweb.catalog.product.repo.ProductRepository;
import com.webmini.miniweb.catalog.product.entity.Product;
import com.webmini.miniweb.common.*;
import com.webmini.miniweb.messaging.service.CategoryEventPublisher;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.LinkedHashMap;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class CategoryService {
    private final CategoryRepository repo;
    private final CategoryMapper mapper;
    private final ProductRepository productRepo;
    private final CategoryEventPublisher eventPublisher;
    private final ObjectMapper objectMapper;
    private final CacheManager cacheManager;

    @Transactional
    public CategoryDtos.CategoryResponse create(CategoryDtos.CategoryCreateRequest req) {
        String trimmedName = validateAndTrimName(req.name());
        validateStatus(req.status());
        
        if (repo.existsByNameIgnoreCase(trimmedName)) {
            throw new ConflictException("T√™n danh m·ª•c '" + trimmedName + "' ƒë√£ t·ªìn t·∫°i");
        }
        
        Category e = mapper.toEntity(req);
        e.setName(trimmedName);
        e.setUpdatedAt(null);
        
        Category saved = repo.save(e);
        eventPublisher.publishCategoryCreated(saved.getId(), saved.getName(), saved.getStatus().name());
        
        return mapper.toDto(saved);
    }

    @Transactional(readOnly = true)
    public CategoryDtos.CategoryResponse get(Long id) {
        log.debug("üîç [CACHE] ƒêang t√¨m category ID={} trong cache...", id);
        
        Cache cache = cacheManager.getCache("categories");
        if (cache != null) {
            Cache.ValueWrapper wrapper = cache.get(id);
            
            if (wrapper != null) {
                Object cachedValue = wrapper.get();
                log.debug("‚úÖ [CACHE HIT] T√¨m th·∫•y cache cho ID={}, ki·ªÉu: {}", id, cachedValue != null ? cachedValue.getClass().getSimpleName() : "null");

                try {
                    if (cachedValue instanceof CategoryDtos.CategoryResponse) {
                        log.info("‚úÖ [CACHE] Tr·∫£ v·ªÅ cache ƒë√∫ng ki·ªÉu cho ID={}", id);
                        return (CategoryDtos.CategoryResponse) cachedValue;
                    }
                    
                    if (cachedValue instanceof LinkedHashMap) {
                        log.warn("‚ö†Ô∏è [CACHE] Cache l√† LinkedHashMap, ƒëang convert cho ID={}...", id);
                        CategoryDtos.CategoryResponse converted = objectMapper.convertValue(
                            cachedValue, 
                            CategoryDtos.CategoryResponse.class
                        );
                        log.info("‚úÖ [CACHE] Convert th√†nh c√¥ng LinkedHashMap ‚Üí CategoryResponse cho ID={}", id);
                        
                        cache.put(id, converted);
                        log.debug("üíæ [CACHE] ƒê√£ cache l·∫°i ƒë√∫ng ki·ªÉu cho ID={}", id);
                        
                        return converted;
                    }
                    
                    log.error("‚ùå [CACHE] Cache c√≥ ki·ªÉu l·∫°: {} cho ID={}, x√≥a cache...", 
                             cachedValue.getClass().getName(), id);
                    cache.evict(id);
                    
                } catch (Exception ex) {
                    log.error("‚ùå [CACHE] L·ªói khi x·ª≠ l√Ω cache cho ID={}: {}", id, ex.getMessage());
                    cache.evict(id);
                }
            } else {
                log.debug("‚ùå [CACHE MISS] Kh√¥ng t√¨m th·∫•y cache cho ID={}", id);
            }
        }
        
        log.info("üîÑ [DB QUERY] Query database cho category ID={}", id);
        Category entity = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + id));
        
        CategoryDtos.CategoryResponse response = mapper.toDto(entity);
        
        if (cache != null) {
            cache.put(id, response);
            log.debug("üíæ [CACHE] ƒê√£ cache response cho ID={}", id);
        }
        
        return response;
    }

    /**
     * ‚úÖ C·∫¢I TI·∫æN: Cascade inactive products khi category b·ªã inactive
     */
    @Transactional
    @CacheEvict(value = "categories", key = "#id")
    public CategoryDtos.CategoryResponse update(Long id, CategoryDtos.CategoryUpdateRequest req) {
        Category e = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + id));
        
        String trimmedName = validateAndTrimName(req.name());
        validateStatus(req.status());
        
        if (!e.getName().equalsIgnoreCase(trimmedName) && repo.existsByNameIgnoreCase(trimmedName)) {
            throw new ConflictException("T√™n danh m·ª•c '" + trimmedName + "' ƒë√£ t·ªìn t·∫°i");
        }

        Category.CategoryStatus oldStatus = e.getStatus();
        Category.CategoryStatus newStatus = Category.CategoryStatus.valueOf(req.status());

        mapper.update(e, req);
        e.setName(trimmedName);
        e.setUpdatedAt(java.time.LocalDateTime.now());
        
        Category saved = repo.save(e);

        // üî• X·ª¨ L√ù CASCADE: ACTIVE ‚Üí INACTIVE
        if (oldStatus == Category.CategoryStatus.ACTIVE && 
            newStatus == Category.CategoryStatus.INACTIVE) {
            
            log.info("‚ö†Ô∏è [CASCADE] Category ID={} chuy·ªÉn ACTIVE ‚Üí INACTIVE, ƒëang inactive c√°c products...", id);
            cascadeInactiveProducts(saved);
        }

        // Publish event
        if (oldStatus != saved.getStatus()) {
            eventPublisher.publishCategoryStatusChanged(
                saved.getId(),
                saved.getName(),
                oldStatus.name(),
                saved.getStatus().name()
            );
        }

        return mapper.toDto(saved);
    }

    @Transactional
    @CacheEvict(value = "categories", key = "#id")
    public void delete(Long id) {
        if (!repo.existsById(id)) {
            throw new NotFoundException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + id);
        }
        
        if (productRepo.existsByCategoryId(id)) {
            throw new ConflictException(
                "Kh√¥ng th·ªÉ x√≥a danh m·ª•c v√¨ c√≥ s·∫£n ph·∫©m ƒëang tham chi·∫øu. " +
                "Vui l√≤ng di chuy·ªÉn ho·∫∑c x√≥a c√°c s·∫£n ph·∫©m ƒë√≥ tr∆∞·ªõc."
            );
        }
        
        repo.deleteById(id);
    }

    @Transactional(readOnly = true)
    public Page<CategoryDtos.CategoryResponse> search(String q, String status, Pageable pageable) {
        if (status != null && !status.isBlank()) {
            validateStatus(status);
        }
        
        return repo.search(q, status, pageable).map(mapper::toDto);
    }

    /**
     * üî• CASCADE: T·ª± ƒë·ªông inactive t·∫•t c·∫£ products thu·ªôc category
     *
     * ‚ö†Ô∏è Logic:
     * - T√¨m t·∫•t c·∫£ products ACTIVE thu·ªôc category
     * - Chuy·ªÉn status sang INACTIVE
     * - X√≥a cache c·ªßa products b·ªã ·∫£nh h∆∞·ªüng
     * - Log s·ªë l∆∞·ª£ng products b·ªã inactive
     */
    private void cascadeInactiveProducts(Category category) {
        // T√¨m t·∫•t c·∫£ products ACTIVE thu·ªôc category n√†y
        List<Product> activeProducts = productRepo.findByCategoryIdAndStatus(
            category.getId(), 
            Product.ProductStatus.ACTIVE
        );
        
        if (activeProducts.isEmpty()) {
            log.info("‚úÖ [CASCADE] Kh√¥ng c√≥ products ACTIVE n√†o thu·ªôc category ID={}", category.getId());
            return;
        }
        
        log.warn("‚ö†Ô∏è [CASCADE] T√¨m th·∫•y {} products ACTIVE thu·ªôc category ID={}, ƒëang inactive...", 
                 activeProducts.size(), category.getId());
        
        // Inactive t·ª´ng product
        int count = 0;
        Cache productCache = cacheManager.getCache("products");
        
        for (Product product : activeProducts) {
            product.setStatus(Product.ProductStatus.INACTIVE);
            product.setUpdatedAt(java.time.LocalDateTime.now());
            productRepo.save(product);
            
            // X√≥a cache c·ªßa product
            if (productCache != null) {
                productCache.evict(product.getId());
                log.debug("üóëÔ∏è [CACHE] ƒê√£ x√≥a cache cho product ID={}", product.getId());
            }
            
            count++;
            log.debug("‚úÖ [CASCADE] Inactive product ID={} (SKU: {})", product.getId(), product.getSku());
        }
        
        log.warn("‚ö†Ô∏è [CASCADE] ƒê√£ inactive {} products thu·ªôc category ID={} ({})", 
                 count, category.getId(), category.getName());
    }

    private String validateAndTrimName(String name) {
        if (name == null || name.isBlank()) {
            throw new ValidationException("T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        String trimmed = name.trim();
        
        if (trimmed.length() < 2) {
            throw new ValidationException("T√™n danh m·ª•c ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±");
        }
        
        if (trimmed.length() > 150) {
            throw new ValidationException("T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 150 k√Ω t·ª±");
        }
        
        return trimmed;
    }

    private void validateStatus(String status) {
        if (status == null || status.isBlank()) {
            throw new ValidationException("Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        if (!status.equals("ACTIVE") && !status.equals("INACTIVE")) {
            throw new ValidationException("Tr·∫°ng th√°i ph·∫£i l√† ACTIVE ho·∫∑c INACTIVE");
        }
    }
}