package com.webmini.miniweb.catalog.category.service;

import com.webmini.miniweb.catalog.category.dto.*;
import com.webmini.miniweb.catalog.category.entity.Category;
import com.webmini.miniweb.catalog.category.mapper.CategoryMapper;
import com.webmini.miniweb.catalog.category.repo.CategoryRepository;
import com.webmini.miniweb.catalog.product.repo.ProductRepository;
import com.webmini.miniweb.common.*;
import com.webmini.miniweb.messaging.service.CategoryEventPublisher;
import lombok.RequiredArgsConstructor;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class CategoryService {
    private final CategoryRepository repo;
    private final CategoryMapper mapper;
    private final ProductRepository productRepo;
    private final CategoryEventPublisher eventPublisher;

    @Transactional
    // @CacheEvict(value = "categories", allEntries = true)
    public CategoryDtos.CategoryResponse create(CategoryDtos.CategoryCreateRequest req) {
        // Validate and trim name
        String trimmedName = validateAndTrimName(req.name());
        
        // Validate status
        validateStatus(req.status());
        
        // Check duplicate name
        if (repo.existsByNameIgnoreCase(trimmedName)) {
            throw new ConflictException("T√™n danh m·ª•c '" + trimmedName + "' ƒë√£ t·ªìn t·∫°i");
        }
        
        // Create new category
        Category e = mapper.toEntity(req);
        e.setName(trimmedName);
        e.setUpdatedAt(null);
        
        Category saved = repo.save(e);
        
        // üî• G·ª≠i message v√†o RabbitMQ: Category ƒë∆∞·ª£c t·∫°o m·ªõi
        eventPublisher.publishCategoryCreated(saved.getId(), saved.getName(), saved.getStatus().name());
        
        return mapper.toDto(saved);
    }

    @Transactional(readOnly = true)
    @Cacheable(value = "categories", key = "#id", unless = "#result == null")
    public CategoryDtos.CategoryResponse get(Long id) {
        Category e = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + id));
        return mapper.toDto(e);
    }

    @Transactional
    // @CacheEvict(value = "categories", allEntries = true)
    @CacheEvict(value = "categories", key = "#id")
    public CategoryDtos.CategoryResponse update(Long id, CategoryDtos.CategoryUpdateRequest req) {
        // Find existing category
        Category e = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + id));
        
        // Validate and trim name
        String trimmedName = validateAndTrimName(req.name());
        
        // Validate status
        validateStatus(req.status());
        
        // Check duplicate name (excluding current category)
        if (!e.getName().equalsIgnoreCase(trimmedName) && repo.existsByNameIgnoreCase(trimmedName)) {
            throw new ConflictException("T√™n danh m·ª•c '" + trimmedName + "' ƒë√£ t·ªìn t·∫°i");
        }

        Category.CategoryStatus oldStatus = e.getStatus();

        // Update entity
        mapper.update(e, req);
        e.setName(trimmedName);
        e.setUpdatedAt(java.time.LocalDateTime.now());
        
        Category saved = repo.save(e);

        // üî• N·∫øu status thay ƒë·ªïi, g·ª≠i message v√†o RabbitMQ
        if (oldStatus != saved.getStatus()) {
            eventPublisher.publishCategoryStatusChanged(
                saved.getId(),
                saved.getName(),
                oldStatus.name(),
                saved.getStatus().name()
            );
            
            // ‚ö†Ô∏è QUAN TR·ªåNG: Kh√¥ng g·ªçi cascadeInactiveToProducts() ·ªü ƒë√¢y n·ªØa
            // ƒê·ªÉ RabbitMQ Listener x·ª≠ l√Ω (b·∫•t ƒë·ªìng b·ªô)
        }

        return mapper.toDto(saved);
    }

    @Transactional
    @CacheEvict(value = "categories", key = "#id")
    // @CacheEvict(value = "categories", allEntries = true)
    public void delete(Long id) {
        if (!repo.existsById(id)) {
            throw new NotFoundException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + id);
        }
        
        // Check if any products reference this category
        if (productRepo.existsByCategoryId(id)) {
            throw new ConflictException(
                "Kh√¥ng th·ªÉ x√≥a danh m·ª•c v√¨ c√≥ s·∫£n ph·∫©m ƒëang tham chi·∫øu. " +
                "Vui l√≤ng di chuy·ªÉn ho·∫∑c x√≥a c√°c s·∫£n ph·∫©m ƒë√≥ tr∆∞·ªõc."
            );
        }
        
        repo.deleteById(id);
    }

    @Transactional(readOnly = true)
    // ‚ö†Ô∏è Kh√¥ng cache Page object v√¨ kh√¥ng serialize/deserialize t·ªët v·ªõi Redis
    // Ch·ªâ cache get by ID l√† ƒë·ªß
    public Page<CategoryDtos.CategoryResponse> search(String q, String status, Pageable pageable) {
        // Validate status if provided
        if (status != null && !status.isBlank()) {
            validateStatus(status);
        }
        
        return repo.search(q, status, pageable).map(mapper::toDto);
    }

    /**
     * Validate and trim category name
     */
    private String validateAndTrimName(String name) {
        if (name == null || name.isBlank()) {
            throw new ValidationException("T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        String trimmed = name.trim();
        
        if (trimmed.length() < 2) {
            throw new ValidationException("T√™n danh m·ª•c ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±");
        }
        
        if (trimmed.length() > 150) {
            throw new ValidationException("T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 150 k√Ω t·ª±");
        }
        
        return trimmed;
    }

    /**
     * Validate status enum value
     */
    private void validateStatus(String status) {
        if (status == null || status.isBlank()) {
            throw new ValidationException("Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        if (!status.equals("ACTIVE") && !status.equals("INACTIVE")) {
            throw new ValidationException("Tr·∫°ng th√°i ph·∫£i l√† ACTIVE ho·∫∑c INACTIVE");
        }
    }
}