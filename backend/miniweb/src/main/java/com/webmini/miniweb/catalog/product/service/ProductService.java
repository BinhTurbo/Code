package com.webmini.miniweb.catalog.product.service;

import com.webmini.miniweb.catalog.category.entity.Category;
import com.webmini.miniweb.catalog.category.repo.CategoryRepository;
import com.webmini.miniweb.catalog.product.dto.*;
import com.webmini.miniweb.catalog.product.entity.Product;
import com.webmini.miniweb.catalog.product.mapper.ProductMapper;
import com.webmini.miniweb.catalog.product.repo.ProductRepository;
import com.webmini.miniweb.common.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.LinkedHashMap;

@Slf4j
@Service
@RequiredArgsConstructor
public class ProductService {
    private final ProductRepository repo;
    private final CategoryRepository categories;
    private final ProductMapper mapper;
    private final ObjectMapper objectMapper;
    private final CacheManager cacheManager;

    @Transactional
    @CacheEvict(value = "products", allEntries = true)
    public ProductDtos.ProductResponse create(ProductDtos.ProductCreateRequest req) {
        // Validate SKU
        String trimmedSku = validateAndTrimSku(req.sku());
        
        // Validate name
        String trimmedName = validateAndTrimName(req.name());
        
        // Validate price
        validatePrice(req.price());
        
        // Validate stock
        validateStock(req.stock());
        
        // Validate status
        validateStatus(req.status());
        
        // Check duplicate SKU
        if (repo.existsBySkuIgnoreCase(trimmedSku)) {
            throw new ConflictException("M√£ SKU '" + trimmedSku + "' ƒë√£ t·ªìn t·∫°i");
        }
        
        // Validate category exists
        Category cat = categories.findById(req.categoryId())
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + req.categoryId()));

        // Create new product
        Product e = mapper.toEntity(req);
        e.setSku(trimmedSku);
        e.setName(trimmedName);
        e.setCategory(cat);
        e.setUpdatedAt(null);

        Product saved = repo.save(e);

        // Auto-activate category if product is ACTIVE but category is INACTIVE
        if (saved.getStatus() == Product.ProductStatus.ACTIVE &&
                cat.getStatus() == Category.CategoryStatus.INACTIVE) {
            activateCategory(cat);
        }

        return mapper.toDto(saved);
    }

    /**
     * ‚úÖ T·ª∞ X·ª¨ L√ù CACHE - Kh√¥ng d√πng @Cacheable
     * 
     * üî• Flow:
     * 1. Ki·ªÉm tra cache th·ªß c√¥ng
     * 2. N·∫øu c√≥ cache:
     *    - Try cast v·ªÅ ProductResponse
     *    - N·∫øu l·ªói ‚Üí convert t·ª´ LinkedHashMap
     * 3. N·∫øu kh√¥ng c√≥ cache ‚Üí query DB ‚Üí cache l·∫°i
     */
    @Transactional(readOnly = true)
    // ‚ùå B·ªé @Cacheable (v√¨ n√≥ cast tr∆∞·ªõc khi v√†o method)
    // @Cacheable(value = "products", key = "#id")
    public ProductDtos.ProductResponse get(Long id) {
        log.debug("üîç [CACHE] ƒêang t√¨m product ID={} trong cache...", id);
        
        // 1Ô∏è‚É£ Ki·ªÉm tra cache th·ªß c√¥ng
        Cache cache = cacheManager.getCache("products");
        if (cache != null) {
            Cache.ValueWrapper wrapper = cache.get(id);
            
            if (wrapper != null) {
                Object cachedValue = wrapper.get();
                log.debug("‚úÖ [CACHE HIT] T√¨m th·∫•y cache cho product ID={}, ki·ªÉu: {}", id, 
                         cachedValue != null ? cachedValue.getClass().getSimpleName() : "null");
                
                // 2Ô∏è‚É£ X·ª≠ l√Ω cache data
                try {
                    // Try cast tr·ª±c ti·∫øp (n·∫øu cache ƒë√∫ng)
                    if (cachedValue instanceof ProductDtos.ProductResponse) {
                        log.info("‚úÖ [CACHE] Tr·∫£ v·ªÅ cache ƒë√∫ng ki·ªÉu cho product ID={}", id);
                        return (ProductDtos.ProductResponse) cachedValue;
                    }
                    
                    // N·∫øu l√† LinkedHashMap ‚Üí convert
                    if (cachedValue instanceof LinkedHashMap) {
                        log.warn("‚ö†Ô∏è [CACHE] Cache l√† LinkedHashMap, ƒëang convert cho product ID={}...", id);
                        ProductDtos.ProductResponse converted = objectMapper.convertValue(
                            cachedValue, 
                            ProductDtos.ProductResponse.class
                        );
                        log.info("‚úÖ [CACHE] Convert th√†nh c√¥ng LinkedHashMap ‚Üí ProductResponse cho ID={}", id);
                        
                        // 3Ô∏è‚É£ Cache l·∫°i ƒë√∫ng ki·ªÉu (ƒë·ªÉ l·∫ßn sau kh√¥ng c·∫ßn convert)
                        cache.put(id, converted);
                        log.debug("üíæ [CACHE] ƒê√£ cache l·∫°i ƒë√∫ng ki·ªÉu cho product ID={}", id);
                        
                        return converted;
                    }
                    
                    // Ki·ªÉu kh√¥ng mong ƒë·ª£i ‚Üí x√≥a cache l·ªói
                    log.error("‚ùå [CACHE] Cache c√≥ ki·ªÉu l·∫°: {} cho product ID={}, x√≥a cache...", 
                             cachedValue.getClass().getName(), id);
                    cache.evict(id);
                    
                } catch (Exception ex) {
                    log.error("‚ùå [CACHE] L·ªói khi x·ª≠ l√Ω cache cho product ID={}: {}", id, ex.getMessage());
                    // X√≥a cache l·ªói
                    cache.evict(id);
                }
            } else {
                log.debug("‚ùå [CACHE MISS] Kh√¥ng t√¨m th·∫•y cache cho product ID={}", id);
            }
        }
        
        // 4Ô∏è‚É£ Cache miss ho·∫∑c l·ªói ‚Üí Query DB
        log.info("üîÑ [DB QUERY] Query database cho product ID={}", id);
        Product entity = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + id));
        
        ProductDtos.ProductResponse response = mapper.toDto(entity);
        
        // 5Ô∏è‚É£ Cache l·∫°i k·∫øt qu·∫£
        if (cache != null) {
            cache.put(id, response);
            log.debug("üíæ [CACHE] ƒê√£ cache response cho product ID={}", id);
        }
        
        return response;
    }

    @Transactional
    @CacheEvict(value = "products", allEntries = true)
    public ProductDtos.ProductResponse update(Long id, ProductDtos.ProductUpdateRequest req) {
        // Find existing product
        Product e = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + id));
        
        // Validate name
        String trimmedName = validateAndTrimName(req.name());
        
        // Validate price
        validatePrice(req.price());
        
        // Validate stock
        validateStock(req.stock());
        
        // Validate status
        validateStatus(req.status());
        
        // Validate category exists
        Category cat = categories.findById(req.categoryId())
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + req.categoryId()));

        Product.ProductStatus oldStatus = e.getStatus();

        // Update entity
        mapper.update(e, req);
        e.setName(trimmedName);
        e.setCategory(cat);
        e.setUpdatedAt(java.time.LocalDateTime.now());

        Product saved = repo.save(e);

        // Auto-activate category if product became ACTIVE but category is INACTIVE
        if (oldStatus == Product.ProductStatus.INACTIVE &&
                saved.getStatus() == Product.ProductStatus.ACTIVE &&
                cat.getStatus() == Category.CategoryStatus.INACTIVE) {
            activateCategory(cat);
        }

        return mapper.toDto(saved);
    }

    @Transactional
    @CacheEvict(value = "products", allEntries = true)
    public void delete(Long id) {
        if (!repo.existsById(id)) {
            throw new NotFoundException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + id);
        }
        repo.deleteById(id);
    }

    @Transactional(readOnly = true)
    // ‚ö†Ô∏è Kh√¥ng cache Page object v√¨ kh√¥ng serialize/deserialize t·ªët v·ªõi Redis
    // Ch·ªâ cache get by ID l√† ƒë·ªß
    public Page<ProductDtos.ProductResponse> search(String q, String sku, Long categoryId,
                                                    String status, Integer minStockLt, Pageable pageable) {
        // Validate status if provided
        if (status != null && !status.isBlank()) {
            validateStatus(status);
        }
        
        // Validate minStockLt if provided
        if (minStockLt != null && minStockLt < 0) {
            throw new ValidationException("Gi√° tr·ªã t·ªìn kho t·ªëi thi·ªÉu ph·∫£i >= 0");
        }
        
        return repo.search(q, sku, categoryId, status, minStockLt, pageable).map(mapper::toDto);
    }

    /**
     * Validate and trim SKU
     */
    private String validateAndTrimSku(String sku) {
        if (sku == null || sku.isBlank()) {
            throw new ValidationException("M√£ SKU kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        String trimmed = sku.trim();
        
        if (trimmed.length() < 3) {
            throw new ValidationException("M√£ SKU ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±");
        }
        
        if (trimmed.length() > 100) {
            throw new ValidationException("M√£ SKU kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±");
        }
        
        return trimmed;
    }

    /**
     * Validate and trim product name
     */
    private String validateAndTrimName(String name) {
        if (name == null || name.isBlank()) {
            throw new ValidationException("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        String trimmed = name.trim();
        
        if (trimmed.length() < 2) {
            throw new ValidationException("T√™n s·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±");
        }
        
        if (trimmed.length() > 200) {
            throw new ValidationException("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 200 k√Ω t·ª±");
        }
        
        return trimmed;
    }

    /**
     * Validate price (DECIMAL(18,2) >= 0)
     */
    private void validatePrice(BigDecimal price) {
        if (price == null) {
            throw new ValidationException("Gi√° b√°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        if (price.compareTo(BigDecimal.ZERO) < 0) {
            throw new ValidationException("Gi√° b√°n ph·∫£i >= 0");
        }
        
        // Check DECIMAL(18,2) constraint: max 16 digits before decimal, 2 after
        if (price.precision() - price.scale() > 16) {
            throw new ValidationException("Gi√° b√°n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 9,999,999,999,999,999.99");
        }
        
        if (price.scale() > 2) {
            throw new ValidationException("Gi√° b√°n ch·ªâ ƒë∆∞·ª£c c√≥ t·ªëi ƒëa 2 ch·ªØ s·ªë th·∫≠p ph√¢n");
        }
    }

    /**
     * Validate stock (INT >= 0)
     */
    private void validateStock(Integer stock) {
        if (stock == null) {
            throw new ValidationException("T·ªìn kho kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        if (stock < 0) {
            throw new ValidationException("T·ªìn kho ph·∫£i >= 0");
        }
        
        if (stock > Integer.MAX_VALUE) {
            throw new ValidationException("T·ªìn kho kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 2,147,483,647");
        }
    }

    /**
     * Validate status enum value
     */
    private void validateStatus(String status) {
        if (status == null || status.isBlank()) {
            throw new ValidationException("Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        
        if (!status.equals("ACTIVE") && !status.equals("INACTIVE")) {
            throw new ValidationException("Tr·∫°ng th√°i ph·∫£i l√† ACTIVE ho·∫∑c INACTIVE");
        }
    }

    /**
     * Auto-activate category when creating/updating an ACTIVE product
     */
    private void activateCategory(Category category) {
        category.setStatus(Category.CategoryStatus.ACTIVE);
        category.setUpdatedAt(java.time.LocalDateTime.now());
        categories.save(category);
    }
}